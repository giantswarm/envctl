---
description: 
globs: 
alwaysApply: true
---
# GitHub Workflow Management

## When Starting a New Development Session

1. Use the `mcp_github_list_issues` tool to fetch open issues from `giantswarm/envctl` repository, ordered by issue number descending (newest first)
2. Select the next best open issue and use `mcp_github_get_issue` tool with its issue number to retrieve full details
3. **Summarize the issue** (title, number, body, key tasks) in the chat before starting implementation
4. **Outline your approach** for addressing the issue before continuing with implementation
5. This ensures every coding session starts with up-to-date context from the roadmap

## When Working on an Issue

### Pre-Implementation Checklist
- [ ] Issue has been summarized in chat
- [ ] Approach has been outlined
- [ ] Dependencies are understood
- [ ] Test strategy is clear

### During Implementation
1. **Code Quality Requirements:**
   - Run `goimports -w .` before committing any Go code
   - Run `go fmt ./...` to ensure consistent formatting
   - Verify new packages with `go get` are latest versions (use web search)

2. **API Pattern Compliance:**
   - Follow handler interfaces → adapters → Register() → api.GetXXX() pattern
   - No direct package coupling - everything through API interfaces
   - Create adapters that implement interfaces and call Register()

3. **Testing Throughout Development:**
   - Write unit tests for new functionality
   - Update existing tests if behavior changes
   - Run `make test` regularly during development
   - Ensure minimum 80% test coverage

## When Completing an Issue

### Pre-Closure Checklist
1. **Confirm with user** that the issue is ready to be closed
2. **Code formatting:**
   ```bash
   goimports -w .
   go fmt ./...
   ```
3. **Run tests:**
   ```bash
   make test
   ```

### If Tests FAIL ❌
- **Fix the failing tests** - do not proceed
- Debug and resolve all test failures
- Re-run `make test` to verify fixes
- **DO NOT close the issue** until all tests pass

### If Tests PASS ✅

1. **Git Branch Management:**
   ```bash
   # Get current branch
   git rev-parse --abbrev-ref HEAD
   ```
   
2. **If on main/master branch:**
   - Create new branch: `<type>/issue-<number>-<slugified-title>`
   - Types: `feature`, `fix`, `refactor`, `docs`, `test`, `chore`
   - Example: `refactor/issue-37-capability-api-pattern`
   ```bash
   git checkout -b <new_branch_name>
   ```

3. **Commit Changes:**
   ```bash
   git add .
   git commit -m "<Type>: <issue_title> (closes #<issue_number>)"
   ```
   - Example: `Refactor: Implement capability API pattern (closes #37)`

4. **Push Changes:**
   ```bash
   git push origin <branch_name>
   ```

5. **Close the Issue:**
   - Use `mcp_github_update_issue` tool
   - Parameters:
     - `owner`: `giantswarm`
     - `repo`: `envctl`
     - `issue_number`: `<number>`
     - `state`: `closed`

6. **Inform the user** that changes have been committed and pushed

## When Creating a New Issue

1. **Gather Information:**
   - `title` (required)
   - `body` (required)
   - `labels` (optional)
   - `assignees` (optional)

2. **Create Issue:**
   - Use `mcp_github_create_issue` tool
   - Parameters:
     - `owner`: `giantswarm`
     - `repo`: `envctl`

3. **Announce in chat** with title and issue number

## Special Considerations

### For View Changes
- If changes affect TUI views:
  ```bash
  NO_COLOR=true go test ./internal/tui/view/... -update
  ```
- Review and verify golden files in `internal/tui/view/testdata/*.golden`

### For Documentation Updates
- Update relevant files in `docs/` directory
- Ensure package `doc.go` files are current
- Update README.md if features change

### For Breaking Changes
- Discuss with user before implementing
- Document migration path
- Update CHANGELOG.md

## Common Pitfalls to Avoid

- ❌ **Never** close issues with failing tests
- ❌ **Never** skip `goimports` and `go fmt`
- ❌ **Never** commit directly to main/master
- ❌ **Never** commit code with less than 80% test coverage

## Quick Reference

### GitHub Tool Commands
```yaml
# List issues
mcp_github_list_issues:
  owner: giantswarm
  repo: envctl
  state: open
  sort: created
  direction: desc

# Get issue details  
mcp_github_get_issue:
  owner: giantswarm
  repo: envctl
  issue_number: <number>

# Update issue
mcp_github_update_issue:
  owner: giantswarm
  repo: envctl
  issue_number: <number>
  state: closed

# Create issue
mcp_github_create_issue:
  owner: giantswarm
  repo: envctl
  title: <title>
  body: <body>
