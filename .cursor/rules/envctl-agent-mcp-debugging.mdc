---
description: 
globs: 
alwaysApply: false
---
# Debugging envctl via Agent MCP Server

## Overview
The envctl-agent MCP server provides core debugging tools to test and explore the functionality implemented in the `envctl connect` command. This guide focuses on the agent's internal debugging capabilities, not the functionality from individual MCP servers (which can change).

## Core Agent Debugging Tools

The agent exposes these categories of internal tools for debugging the connect command end-to-end:

### 1. Service Management Tools
These tools help debug the service orchestration layer:

- **`x_service_list`** - Lists all services (MCP servers, port forwards, K8s connections) with their status
  ```
  mcp_envctl-agent_call_tool(name="x_service_list", arguments={})
  ```
  Shows running state, health status, and whether MCP clients are attached.

- **`x_service_status`** - Get detailed status of a specific service
  ```
  mcp_envctl-agent_call_tool(name="x_service_status", arguments={"label": "k8s"})
  ```
  
- **`x_service_start/stop/restart`** - Control service lifecycle
  ```
  mcp_envctl-agent_call_tool(name="x_service_restart", arguments={"label": "prometheus"})
  ```

### 2. MCP Server Debugging
Tools to inspect the MCP server aggregation:

- **`x_mcp_server_list`** - List all registered MCP servers
  ```
  mcp_envctl-agent_call_tool(name="x_mcp_server_list", arguments={})
  ```

- **`x_mcp_server_info`** - Get detailed info about an MCP server including its connection status
  ```
  mcp_envctl-agent_call_tool(name="x_mcp_server_info", arguments={"label": "k8s"})
  ```

- **`x_mcp_server_tools`** - List tools exposed by a specific MCP server
  ```
  mcp_envctl-agent_call_tool(name="x_mcp_server_tools", arguments={"server_name": "k8s"})
  ```
  This is useful to verify which tools are being aggregated from each server.

### 3. Workflow Management Tools
For debugging workflow functionality:

- **`x_workflow_list`** - List all available workflows
  ```
  mcp_envctl-agent_call_tool(name="x_workflow_list", arguments={"include_system": true})
  ```

- **`x_workflow_get`** - Get workflow definition and YAML
  ```
  mcp_envctl-agent_call_tool(name="x_workflow_get", arguments={"name": "list_clusters"})
  ```

- **`x_workflow_create`** - Create new workflows for testing
  ```yaml
  mcp_envctl-agent_call_tool(name="x_workflow_create", arguments={
    "yaml_definition": """
    name: test_workflow
    description: "Test workflow for debugging"
    agentModifiable: true
    inputSchema:
      type: object
      properties: {}
    steps:
      - id: list_services
        tool: x_service_list
        args: {}
        store: services
    """
  })
  ```

- **`x_workflow_validate`** - Validate workflow definitions
  ```
  mcp_envctl-agent_call_tool(name="x_workflow_validate", arguments={"yaml_definition": "..."})
  ```

- **`x_workflow_spec`** - Get workflow schema and examples
  ```
  mcp_envctl-agent_call_tool(name="x_workflow_spec", arguments={})
  ```

### 4. Connection Management Tools
Debug Kubernetes connections and port forwards:

- **`x_k8s_connection_list`** - List all K8s connections
  ```
  mcp_envctl-agent_call_tool(name="x_k8s_connection_list", arguments={})
  ```

- **`x_k8s_connection_info`** - Get K8s connection details
  ```
  mcp_envctl-agent_call_tool(name="x_k8s_connection_info", arguments={"label": "mc-gazelle"})
  ```

- **`x_portforward_list`** - List all port forwards
  ```
  mcp_envctl-agent_call_tool(name="x_portforward_list", arguments={})
  ```

- **`x_portforward_info`** - Get port forward details
  ```
  mcp_envctl-agent_call_tool(name="x_portforward_info", arguments={"label": "mc-prometheus"})
  ```

### 5. Cluster Management Tools
Debug cluster switching functionality:

- **`x_cluster_list`** - List clusters by role (talos, management, workload, observability)
  ```
  mcp_envctl-agent_call_tool(name="x_cluster_list", arguments={"role": "management"})
  ```

- **`x_cluster_active`** - Get active cluster for a role
  ```
  mcp_envctl-agent_call_tool(name="x_cluster_active", arguments={"role": "workload"})
  ```

- **`x_cluster_switch`** - Switch active cluster
  ```
  mcp_envctl-agent_call_tool(name="x_cluster_switch", arguments={
    "role": "management", 
    "cluster_name": "gazelle"
  })
  ```

## Debugging Workflow

### 1. Verify All Services Are Running
Start by checking the overall health of the system:
```
mcp_envctl-agent_call_tool(name="x_service_list", arguments={})
```

### 2. Check MCP Server Registration
Verify that all expected MCP servers are properly registered with the aggregator:
```
mcp_envctl-agent_call_tool(name="x_mcp_server_list", arguments={})
```

### 3. Inspect Tool Aggregation
For any MCP server, check which tools it's exposing to verify the aggregation is working:
```
mcp_envctl-agent_call_tool(name="x_mcp_server_tools", arguments={"server_name": "k8s"})
```

### 4. Test End-to-End with Workflows
Create test workflows to verify the full chain is working:
```yaml
mcp_envctl-agent_call_tool(name="x_workflow_create", arguments={
  "yaml_definition": """
  name: debug_test
  description: "Debug test workflow"
  inputSchema:
    type: object
    properties: {}
  steps:
    - id: list_all
      tool: x_service_list
      args: {}
      store: all_services
    - id: check_k8s
      tool: x_mcp_server_info  
      args:
        label: k8s
      store: k8s_info
  """
})
```

Then execute it:
```
mcp_envctl-agent_call_tool(name="x_debug_test", arguments={})
```

### 5. Troubleshoot Connection Issues
If a service shows as unhealthy:
1. Check its detailed status: `x_service_status`
2. Try restarting it: `x_service_restart`
3. Check if its MCP client is attached in the service list
4. For K8s connections, verify the context: `x_k8s_connection_info`

## Important Notes

- The prefix `x_` is configurable via `EnvctlPrefix` in the aggregator config
- Tool names from individual MCP servers get prefixed to avoid conflicts
- The agent automatically handles tool name resolution and routing
- Service health is continuously monitored and reflected in the status
- Workflows provide a way to test complex multi-step operations

## Common Issues and Solutions

**"CallTool not implemented" errors**
- This means the MCP client is not properly attached to the service
- Check `x_service_list` to see if the service shows a client
- The fix involves ensuring `GetServiceData()` returns the MCP client

**Service shows as unhealthy**
- Check logs in the envctl TUI (if available)
- Use `x_service_status` for detailed information
- Try `x_service_restart` to recover

**Workflow validation fails**
- Use `x_workflow_validate` to check syntax
- Ensure tool names exist (check with `mcp_envctl-agent_list_tools`)
- Verify argument schemas match the tool requirements
