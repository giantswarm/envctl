# Port Forwarding ServiceClass Definition v2
# This example demonstrates a ServiceClass for port forwarding, updated to the new spec.
# Key Changes:
# - Renamed lifecycle tools from 'create'/'delete' to 'start'/'stop' to align with the Service interface.
# - Updated tool names to match the actual tools available in the aggregator.
# - Removed 'healthCheck' and 'status' tools as no corresponding tools were found in the current environment.
name: portforward
type: portforward
version: "2.0.0"
description: "Port forwarding ServiceClass for Kubernetes resources"

# ServiceClass configuration for lifecycle management
serviceConfig:
  # Service metadata
  serviceType: "PortForward"
  defaultLabel: "pf-{{ .resource_type }}-{{ .resource_name }}-{{ .local_port }}"
  dependencies: []
  
  # Lifecycle tool mappings - defines which aggregator tools to call for each lifecycle event
  lifecycleTools:
    start:
      tool: "x_kubernetes_port_forward"
      arguments:
        namespace: "{{ .namespace | default \"default\" }}"
        resourceType: "{{ .resource_type }}"
        resourceName: "{{ .resource_name }}"
        localPort: "{{ .local_port }}"
        targetPort: "{{ .remote_port }}"
      responseMapping:
        serviceId: "$.id"
        status: "$.status"
        metadata:
          namespace: "$.namespace"
          resource_type: "$.resourceType"
          resource_name: "$.resourceName"
          local_port: "$.localPort"
          remote_port: "$.targetPort"
          pid: "$.pid"
    
    stop:
      tool: "x_kubernetes_stop_port_forward"
      arguments:
        id: "{{ .serviceId }}" # Note: .serviceId comes from the response mapping of the 'start' tool
      responseMapping:
        status: "$.status"
        
  # Health check configuration
  healthCheck:
    enabled: true
    interval: "30s"
    failureThreshold: 3
    successThreshold: 1
  
  # Timeout configuration
  timeout:
    create: "60s"
    delete: "30s"
    healthCheck: "10s"
  
  # Parameter mapping for service creation
  createParameters:
    namespace:
      toolParameter: "namespace"
      default: "default"
      required: false
    resource_type:
      toolParameter: "resourceType"
      required: true
    resource_name:
      toolParameter: "resourceName"
      required: true
    local_port:
      toolParameter: "localPort"
      required: true
    remote_port:
      toolParameter: "targetPort"
      required: true

# The 'operations' block is a legacy concept and is no longer used for core lifecycle.
# Service instantiation and management are now handled by the orchestrator via:
# - `core_serviceclass_instance_create`
# - `core_service_start` / `core_service_stop`
# This section is left here as a reference for potentially building higher-level workflows,
# but it is not required for the basic functionality of the ServiceClass.
#
# operations:
#   ...

# Metadata for additional information
metadata:
  provider: "kubernetes"
  category: "networking"
  icon: "ðŸ”Œ"
  tags: "port-forward, networking, kubernetes" 