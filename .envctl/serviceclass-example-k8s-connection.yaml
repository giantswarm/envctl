# Service K8s Connection Capability Definition
# Dynamic service capability for managing Kubernetes cluster connections
name: service_k8s_connection
type: service_k8s_connection
version: "1.0.0"
description: "Dynamic service capability for managing Kubernetes cluster connections with authentication"

# Service lifecycle configuration
serviceConfig:
  # Service metadata
  serviceType: "DynamicK8sConnection"
  defaultLabel: "k8s-{{ .cluster_name }}-{{ .role }}"
  dependencies: []
  
  # Lifecycle tool mappings
  lifecycleTools:
    create:
      tool: "api_kubernetes_connect"
      arguments:
        clusterName: "{{ .cluster_name }}"
        role: "{{ .role }}"
        authProvider: "{{ .auth_provider | default \"teleport\" }}"
        region: "{{ .region }}"
        context: "{{ .context }}"
      responseMapping:
        serviceId: "$.connectionId"
        status: "$.status"
        auth_provider: "$.authProvider"
        metadata:
          cluster_name: "$.clusterName"
          role: "$.role"
          context: "$.context"
    
    delete:
      tool: "api_kubernetes_disconnect"
      arguments:
        connectionId: "{{ .service_id }}"
      responseMapping:
        status: "$.status"
        
    healthCheck:
      tool: "api_kubernetes_connection_status"
      arguments:
        connectionId: "{{ .service_id }}"
      responseMapping:
        health: "$.healthy"
        status: "$.status"
        error: "$.error"
        metadata:
          last_activity: "$.lastActivity"
          
    status:
      tool: "api_kubernetes_connection_info"
      arguments:
        connectionId: "{{ .service_id }}"
      responseMapping:
        metadata:
          current_namespace: "$.currentNamespace"
          user: "$.user"
          server_version: "$.serverVersion"
          node_count: "$.nodeCount"
  
  # Health check configuration
  healthCheck:
    enabled: true
    interval: "60s"
    failureThreshold: 3
    successThreshold: 2
  
  # Timeout configuration
  timeout:
    create: "120s"
    delete: "60s"
    healthCheck: "30s"
  
  # Parameter mapping for service creation
  createParameters:
    cluster_name:
      toolParameter: "clusterName"
      required: true
    role:
      toolParameter: "role"
      required: true
    region:
      toolParameter: "region"
      required: false
    context:
      toolParameter: "context"
      required: false
    auth_provider:
      toolParameter: "authProvider"
      default: "teleport"
      required: false

# External API operations
operations:
  create_connection:
    description: "Create a new Kubernetes cluster connection"
    parameters:
      cluster_name:
        type: string
        required: true
        description: "Name of the Kubernetes cluster"
      role:
        type: string
        required: true
        description: "Role for the connection (management, workload, etc.)"
      region:
        type: string
        required: false
        description: "AWS region or cloud region"
      context:
        type: string
        required: false
        description: "Kubernetes context name"
      auth_provider:
        type: string
        required: false
        description: "Authentication provider (teleport, aws, gcp, etc.)"
    requires:
      - api_service_orchestrator_create_service
    workflow:
      name: create_k8s_connection_service
      description: "Create a dynamic K8s connection service"
      agentModifiable: false
      inputSchema:
        type: object
        properties:
          cluster_name:
            type: string
          role:
            type: string
          region:
            type: string
          context:
            type: string
          auth_provider:
            type: string
        required:
          - cluster_name
          - role
      steps:
        - id: create_service
          tool: api_service_orchestrator_create_service
          args:
            capability_name: "service_k8s_connection"
            label: "k8s-{{ .cluster_name }}-{{ .role }}"
            parameters:
              cluster_name: "{{ .cluster_name }}"
              role: "{{ .role }}"
              region: "{{ .region }}"
              context: "{{ .context }}"
              auth_provider: "{{ .auth_provider }}"
          store: service_result

  switch_context:
    description: "Switch Kubernetes context for existing connection"
    parameters:
      connection_id:
        type: string
        required: true
        description: "Connection service ID"
      context:
        type: string
        required: true
        description: "New Kubernetes context"
    requires:
      - api_kubernetes_switch_context
    workflow:
      name: switch_k8s_context
      description: "Switch K8s context"
      steps:
        - id: switch_context
          tool: api_kubernetes_switch_context
          args:
            connectionId: "{{ .connection_id }}"
            context: "{{ .context }}"
          store: switch_result

  list_connections:
    description: "List all Kubernetes connection services"
    requires:
      - api_service_orchestrator_list_services
    workflow:
      name: list_k8s_connections
      description: "List K8s connection services"
      steps:
        - id: list_services
          tool: api_service_orchestrator_list_services
          args:
            capability_type: "service_k8s_connection"
          store: services_list

# Metadata
metadata:
  provider: "kubernetes"
  category: "connection"
  icon: "⚙️"
  version: "1.0.0"
  requires:
    auth:
      - "teleport" # or other auth providers
  # Additional metadata for this capability type
  supports:
    - "multi-cluster"
    - "authentication"
    - "context-switching"
  dependencies:
    - "teleport" # or other auth providers
  documentation: "https://docs.example.com/k8s-connections" 