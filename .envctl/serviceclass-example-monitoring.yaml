# Monitoring ServiceClass Definition
# This example demonstrates a ServiceClass for monitoring and observability operations
name: monitoring_stack
type: monitoring
version: "2.0.0"
description: "Monitoring ServiceClass for Prometheus, Grafana, and AlertManager stack management"

# ServiceClass configuration for lifecycle management
serviceConfig:
  # Service metadata
  serviceType: "MonitoringStack"
  defaultLabel: "monitoring-{{ .stack_name }}-{{ .environment }}"
  dependencies: []
  
  # Lifecycle tool mappings - defines which aggregator tools to call for each lifecycle event
  lifecycleTools:
    create:
      tool: "api_monitoring_stack_deploy"
      arguments:
        stackName: "{{ .stack_name }}"
        environment: "{{ .environment }}"
        namespace: "{{ .namespace | default \"monitoring\" }}"
        prometheusConfig: "{{ .prometheus_config }}"
        grafanaConfig: "{{ .grafana_config }}"
      responseMapping:
        serviceId: "$.stackId"
        status: "$.status"
        metadata:
          stack_name: "$.stackName"
          environment: "$.environment"
          namespace: "$.namespace"
          prometheus_url: "$.prometheusUrl"
          grafana_url: "$.grafanaUrl"
    
    delete:
      tool: "api_monitoring_stack_destroy"
      arguments:
        stackId: "{{ .service_id }}"
        cleanup: true
      responseMapping:
        status: "$.status"
        
    healthCheck:
      tool: "api_monitoring_stack_health"
      arguments:
        stackId: "{{ .service_id }}"
      responseMapping:
        health: "$.healthy"
        status: "$.status"
        error: "$.error"
        metadata:
          prometheus_healthy: "$.prometheusHealthy"
          grafana_healthy: "$.grafanaHealthy"
          alertmanager_healthy: "$.alertmanagerHealthy"
          
    status:
      tool: "api_monitoring_stack_status"
      arguments:
        stackId: "$.service_id"
      responseMapping:
        metadata:
          active_alerts: "$.activeAlerts"
          metrics_ingested: "$.metricsIngested"
          dashboards_count: "$.dashboardsCount"
          uptime: "$.uptime"
  
  # Health check configuration
  healthCheck:
    enabled: true
    interval: "120s"
    failureThreshold: 3
    successThreshold: 2
  
  # Timeout configuration
  timeout:
    create: "300s"  # Monitoring stacks take longer to deploy
    delete: "180s"
    healthCheck: "30s"
  
  # Parameter mapping for service creation
  createParameters:
    stack_name:
      toolParameter: "stackName"
      required: true
    environment:
      toolParameter: "environment"
      required: true
    namespace:
      toolParameter: "namespace"
      default: "monitoring"
      required: false
    prometheus_config:
      toolParameter: "prometheusConfig"
      required: false
    grafana_config:
      toolParameter: "grafanaConfig"
      required: false

# Operations define the ServiceClass interface
operations:
  query_metrics:
    description: "Query metrics from Prometheus"
    parameters:
      query:
        type: string
        required: true
        description: "PromQL query string"
      time_range:
        type: string
        required: false
        description: "Time range for the query (e.g., '1h', '24h')"
        default: "1h"
      step:
        type: string
        required: false
        description: "Query resolution step"
        default: "30s"
    requires:
      - api_prometheus_query
    workflow:
      name: prometheus_query
      description: "Execute Prometheus query workflow"
      agentModifiable: false
      inputSchema:
        type: object
        properties:
          query:
            type: string
            description: "PromQL query string"
          time_range:
            type: string
            description: "Time range for the query"
          step:
            type: string
            description: "Query step"
        required:
          - query
      steps:
        - id: execute_query
          tool: api_prometheus_query
          args:
            query: "{{ .query }}"
            range: "{{ .time_range | default \"1h\" }}"
            step: "{{ .step | default \"30s\" }}"
          store: query_result
  
  create_alert_rule:
    description: "Create or update an alert rule in Alertmanager"
    parameters:
      rule_name:
        type: string
        required: true
        description: "Name of the alert rule"
      expression:
        type: string
        required: true
        description: "PromQL expression for the alert"
      duration:
        type: string
        required: false
        description: "Duration before alert fires"
        default: "5m"
      severity:
        type: string
        required: false
        description: "Alert severity level"
        default: "warning"
    requires:
      - api_alertmanager_create_rule
    workflow:
      name: create_alert_rule
      description: "Create alert rule workflow"
      agentModifiable: false
      inputSchema:
        type: object
        properties:
          rule_name:
            type: string
            description: "Alert rule name"
          expression:
            type: string
            description: "PromQL expression"
          duration:
            type: string
            description: "Alert duration"
          severity:
            type: string
            description: "Alert severity"
        required:
          - rule_name
          - expression
      steps:
        - id: create_rule
          tool: api_alertmanager_create_rule
          args:
            name: "{{ .rule_name }}"
            expr: "{{ .expression }}"
            for: "{{ .duration | default \"5m\" }}"
            labels:
              severity: "{{ .severity | default \"warning\" }}"
          store: rule_result

  create_dashboard:
    description: "Create a Grafana dashboard"
    parameters:
      dashboard_name:
        type: string
        required: true
        description: "Name of the dashboard"
      datasource:
        type: string
        required: false
        description: "Datasource for the dashboard"
        default: "prometheus"
      panels:
        type: array
        required: false
        description: "Dashboard panels configuration"
    requires:
      - api_grafana_create_dashboard
    workflow:
      name: create_grafana_dashboard
      description: "Create Grafana dashboard workflow"
      agentModifiable: false
      inputSchema:
        type: object
        properties:
          dashboard_name:
            type: string
            description: "Dashboard name"
          datasource:
            type: string
            description: "Dashboard datasource"
          panels:
            type: array
            description: "Dashboard panels"
        required:
          - dashboard_name
      steps:
        - id: create_dashboard
          tool: api_grafana_create_dashboard
          args:
            title: "{{ .dashboard_name }}"
            datasource: "{{ .datasource | default \"prometheus\" }}"
            panels: "{{ .panels }}"
            tags:
              - "envctl"
              - "generated"
          store: dashboard_result

  create_service:
    description: "Create a managed monitoring stack service"
    parameters:
      stack_name:
        type: string
        required: true
        description: "Name of the monitoring stack"
      environment:
        type: string
        required: true
        description: "Environment (dev, staging, prod)"
      namespace:
        type: string
        required: false
        description: "Kubernetes namespace"
        default: "monitoring"
      prometheus_config:
        type: string
        required: false
        description: "Prometheus configuration"
      grafana_config:
        type: string
        required: false
        description: "Grafana configuration"
    requires:
      - api_service_orchestrator_create_service
    workflow:
      name: create_monitoring_service
      description: "Create a managed monitoring stack"
      agentModifiable: false
      inputSchema:
        type: object
        properties:
          stack_name:
            type: string
          environment:
            type: string
          namespace:
            type: string
          prometheus_config:
            type: string
          grafana_config:
            type: string
        required:
          - stack_name
          - environment
      steps:
        - id: create_service
          tool: api_service_orchestrator_create_service
          args:
            capability_name: "monitoring_stack"
            label: "monitoring-{{ .stack_name }}-{{ .environment }}"
            parameters:
              stack_name: "{{ .stack_name }}"
              environment: "{{ .environment }}"
              namespace: "{{ .namespace }}"
              prometheus_config: "{{ .prometheus_config }}"
              grafana_config: "{{ .grafana_config }}"
          store: service_result

# Metadata for additional information
metadata:
  provider: "prometheus-stack"
  category: "observability"
  icon: "ðŸ“Š"
  components:
    - "prometheus"
    - "grafana"
    - "alertmanager"
  tags:
    - "metrics"
    - "alerts"
    - "dashboards"
    - "observability"
    - "stack-management" 