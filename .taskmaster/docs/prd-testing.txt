# Product Requirements Document: `gs-debug` Engine Testing & Hardening

**Author:** Gemini SRE Agent
**Version:** 1.0
**Date:** 2025-06-16
**Status:** Draft

---

## 1. Vision & Mission

**Vision:** To build a supremely reliable, robust, and correct operational engine.

**Mission:** To systematically validate, test, and harden every component of the `envctl` engine by defining a comprehensive test suite based on real-world use cases. This effort will identify and eliminate bugs, ensure the correctness of the concepts (`Workflows`, `ServiceClasses`, `Services`, `Capabilities`, `MCPServers`), and produce a stable foundation for all future platform development.

---

## 2. Problem Statement & Goals

The `envctl` engine and its components are powerful but have exhibited stability issues in the past. To build a trusted platform on top of this engine, we must have a high degree of confidence in its correctness and reliability. Ad-hoc testing is insufficient.

**Goals:**

*   **Goal 1: Analyze the concepts:** Identify all functionality of `envctl` core, particularly the `Workflow`, `ServiceClasses`, `Services`, `Capabilities` and `MCPServers` concepts. Write down behavioral test specs.
*   **Goal 2: Analyze the code:** Identify testability of the packages in the `envctl` core, particularly the `Workflow`, `ServiceClasses`, `Services`, `Capabilities` and `MCPServers` packages. Write a PRD how to make the code testable. Parse the PRD measure complexity and expand the tasks.
*   **Goal 3: Create a Comprehensive Test Suite:** Create an automated test suite that can run the behavioral test specs to prevent regressions and validate changes. This test suite is a seperate command of envctl that executes end-to-end tests via a MCP client to the aggregated MCP server.
*   **Goal 4: Improve Debuggability:** Enhance the error reporting and logging within `envctl serve` to make diagnosing failures easier with the new test suite.
*   **Goal 5: Validate the Envctl Concepts:** Write integration tests based on the behavioral test spec.
*   **Goal 6: Achieve Foundational Stability:** Identify and fix critical bugs in the `envctl` core, particularly within the `Workflow`, `ServiceClasses`, `Services`, `Capabilities` and `MCPServers` execution lifecycle.

---

## 3. Test Scope & Methodology

This effort will focus on building a testsuite, tests and actual testing of the `envctl` engine through the lens of its highest-level concepts. 

**Methodology:**

1.  **Inventory & Review:** Catalog all existing functionality of `Workflows`, `ServiceClasses`, `Services`, `Capabilities` and `MCPServers` found in `envctl`.
2.  **Manual Validation:** Execute each workflow, service class, capability and mcpserver and service lifecycle manually to establish a baseline of current behavior, documenting all failures, bugs, and unexpected outcomes.
3.  **Test Case Formalization:** Convert each manual validation step into a formal, written test case with clear preconditions, steps, and expected outcomes.
4.  **Bug Remediation:** Address the bugs and issues uncovered during manual validation.
5.  **Test Suite Automation:** Implement the formalized test cases into an automated testing framework.

---

## 4. Test Cases

This section outlines the specific test cases to be implemented. We will first test the core functionality of each concept, then test specific instances and workflows.

### 4.1. Core Workflow Management Tests

These tests validate the fundamental workflow management capabilities of the `gs-debug` engine.

| Test Case ID | Component Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| CORE-WF-01 | `core_workflow_create` | Create a valid workflow from YAML definition. | Workflow is created successfully. `core_workflow_list` includes the new workflow. |
| CORE-WF-02 | `core_workflow_create` | Attempt to create a workflow with invalid YAML syntax. | The operation fails with a specific, helpful YAML parsing error, indicating the line and character of the issue. |
| CORE-WF-03 | `core_workflow_create` | Attempt to create a workflow that references non-existent tools. | Workflow is created but validation shows missing tool dependencies. |
| CORE-WF-04 | `core_workflow_get` | Retrieve details of an existing workflow. | Returns complete workflow definition including steps, parameters, and metadata. |
| CORE-WF-05 | `core_workflow_list` | List all available workflows. | Returns comprehensive list of workflows with their availability status. |
| CORE-WF-06 | `core_workflow_update` | Update an existing workflow with new definition. | Workflow is updated successfully. Changes are reflected in subsequent `get` calls. |
| CORE-WF-07 | `core_workflow_delete` | Delete an existing workflow. | Workflow is removed. `core_workflow_list` no longer includes it. |
| CORE-WF-08 | `core_workflow_validate` | Validate a workflow YAML definition without creating it. | Returns validation results indicating any syntax or dependency issues. |
| CORE-WF-09 | `core_workflow_spec` | Get workflow specification and examples. | Returns complete specification documentation and example workflows. |

### 4.2. Core ServiceClass Management Tests

These tests validate the fundamental ServiceClass management capabilities.

| Test Case ID | Component Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| CORE-SC-01 | `core_serviceclass_create` | Create a valid ServiceClass from YAML definition. | ServiceClass is created successfully. `core_serviceclass_list` includes the new ServiceClass. |
| CORE-SC-02 | `core_serviceclass_create` | Attempt to create a ServiceClass that references non-existent tools. | ServiceClass is created but marked as `available: false`. `core_serviceclass_available` returns clear error about missing tools. |
| CORE-SC-03 | `core_serviceclass_get` | Retrieve details of an existing ServiceClass. | Returns complete ServiceClass definition including lifecycle hooks, parameters, and tool dependencies. |
| CORE-SC-04 | `core_serviceclass_list` | List all available ServiceClasses. | Returns comprehensive list with availability status for each ServiceClass. |
| CORE-SC-05 | `core_serviceclass_available` | Check availability of a ServiceClass with all tools present vs. missing tools. | Returns `true` for valid ServiceClass, `false` with specific error for one with missing tools. |
| CORE-SC-06 | `core_serviceclass_update` | Update an existing ServiceClass definition. | ServiceClass is updated successfully. Changes are reflected in subsequent operations. |
| CORE-SC-07 | `core_serviceclass_delete` | Delete an existing ServiceClass. | ServiceClass is removed. `core_serviceclass_list` no longer includes it. |
| CORE-SC-08 | `core_serviceclass_register` | Register a ServiceClass dynamically at runtime. | ServiceClass becomes available immediately without restart. |
| CORE-SC-09 | `core_serviceclass_unregister` | Unregister a dynamically registered ServiceClass. | ServiceClass becomes unavailable immediately. |
| CORE-SC-10 | `core_serviceclass_refresh` | Refresh availability status of all ServiceClasses. | All ServiceClass availability statuses are updated based on current tool availability. |
| CORE-SC-11 | `core_serviceclass_load` | Load ServiceClass definitions from configured directory. | All ServiceClass files are loaded and become available. |
| CORE-SC-12 | `core_serviceclass_definitions_path` | Get path where ServiceClass definitions are loaded from. | Returns correct path to ServiceClass definitions directory. |

### 4.3. Core Service Instance Management Tests

These tests validate the service instance lifecycle management capabilities.

| Test Case ID | Component Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| CORE-SVC-01 | `core_service_create` | Create a service instance from a valid ServiceClass. | Service instance is created successfully. `core_service_list` shows the new service. |
| CORE-SVC-02 | `core_service_create` | Create a service instance with persistence enabled. | Service instance is created and persisted. Survives engine restart. |
| CORE-SVC-03 | `core_service_create` | Create a service instance with autoStart enabled. | Service instance is created, persisted, and automatically starts on engine restart. |
| CORE-SVC-04 | `core_service_create` | Attempt to create service from non-existent ServiceClass. | Operation fails with clear error about missing ServiceClass. |
| CORE-SVC-05 | `core_service_get` | Get detailed information about a service instance. | Returns complete service details including status, parameters, and runtime information. |
| CORE-SVC-06 | `core_service_list` | List all service instances (static and ServiceClass-based). | Returns comprehensive list with current status for each service. |
| CORE-SVC-07 | `core_service_start` | Start a stopped service instance. | Service transitions to running state. Status reflects the change. |
| CORE-SVC-08 | `core_service_stop` | Stop a running service instance. | Service transitions to stopped state. Resources are cleaned up properly. |
| CORE-SVC-09 | `core_service_restart` | Restart a service instance. | Service stops and starts successfully. State is properly reset. |
| CORE-SVC-10 | `core_service_status` | Get status of a specific service instance. | Returns accurate current status and health information. |
| CORE-SVC-11 | `core_service_delete` | Delete a service instance. | Service is stopped and removed. `core_service_list` no longer includes it. |
| CORE-SVC-12 | `core_service_delete` | Attempt to delete a static service. | Operation fails with appropriate error message about static services. |

### 4.4. Core MCP Server Management Tests

These tests validate the dynamic MCP server management capabilities.

| Test Case ID | Component Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| CORE-MCP-01 | `core_mcpserver_create` | Create a new MCP server definition from valid YAML. | MCP server is created successfully. `core_mcpserver_list` includes the new server. |
| CORE-MCP-02 | `core_mcpserver_create` | Attempt to create MCP server with invalid YAML. | Operation fails with specific YAML parsing error. |
| CORE-MCP-03 | `core_mcpserver_get` | Retrieve details of an existing MCP server. | Returns complete MCP server definition including tools and configuration. |
| CORE-MCP-04 | `core_mcpserver_list` | List all MCP server definitions. | Returns comprehensive list with availability status for each server. |
| CORE-MCP-05 | `core_mcpserver_available` | Check availability of an MCP server. | Returns accurate availability status based on server health. |
| CORE-MCP-06 | `core_mcpserver_register` | Register an MCP server dynamically at runtime. | Server becomes available immediately without restart. Tools become accessible. |
| CORE-MCP-07 | `core_mcpserver_unregister` | Unregister a dynamically registered MCP server. | Server becomes unavailable immediately. Tools are no longer accessible. |
| CORE-MCP-08 | `core_mcpserver_update` | Update an existing MCP server definition. | Changes are applied correctly. Server behavior reflects new configuration. |
| CORE-MCP-09 | `core_mcpserver_delete` | Delete a persisted MCP server definition. | MCP server definition is removed and no longer loads on restart. |
| CORE-MCP-10 | `core_mcpserver_refresh` | Refresh availability status of all MCP servers. | All server availability statuses are updated based on current health. |
| CORE-MCP-11 | `core_mcpserver_load` | Load MCP server definitions from configured directory. | All MCP server files are loaded and become available. |
| CORE-MCP-12 | `core_mcpserver_definitions_path` | Get path where MCP server definitions are loaded from. | Returns correct path to MCP server definitions directory. |

### 4.5. Core Capability Management Tests

These tests validate the capability abstraction layer functionality.

| Test Case ID | Component Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| CORE-CAP-01 | `core_capability_create` | Create a new capability mapping from YAML definition. | Capability is created successfully. `core_capability_list` includes the new capability. |
| CORE-CAP-02 | `core_capability_create` | Create capability that maps specific tool to generic API. | Capability is created. Generic API calls correctly invoke the underlying tool. |
| CORE-CAP-03 | `core_capability_get` | Retrieve details of an existing capability. | Returns complete capability definition including tool mappings and parameters. |
| CORE-CAP-04 | `core_capability_list` | List all capability definitions. | Returns comprehensive list of all available capabilities. |
| CORE-CAP-05 | `core_capability_available` | Check availability of capability with existing vs. missing underlying tool. | Returns `true` for valid capability, `false` for one with missing tool. |
| CORE-CAP-06 | `core_capability_update` | Update an existing capability to point to different tool. | Mapping is updated. Generic API calls now invoke the new tool. |
| CORE-CAP-07 | `core_capability_delete` | Delete an existing capability. | Capability is removed. Generic API calls fail with "capability not found" error. |
| CORE-CAP-08 | `core_capability_load` | Load capability definitions from configured directory. | All capability files are loaded and become available. |
| CORE-CAP-09 | `core_capability_definitions_path` | Get path where capability definitions are loaded from. | Returns correct path to capability definitions directory. |

### 4.6. Core Configuration Management Tests

These tests validate the configuration management capabilities.

| Test Case ID | Component Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| CORE-CFG-01 | `core_config_get` | Get current envctl configuration. | Returns complete current configuration including all settings. |
| CORE-CFG-02 | `core_config_get_global_settings` | Get global settings from configuration. | Returns global settings section of configuration. |
| CORE-CFG-03 | `core_config_get_aggregator` | Get aggregator configuration. | Returns aggregator-specific configuration settings. |
| CORE-CFG-04 | `core_config_update_global_settings` | Update global settings. | Settings are updated successfully. Changes persist across operations. |
| CORE-CFG-05 | `core_config_update_aggregator` | Update aggregator configuration. | Aggregator settings are updated successfully. |
| CORE-CFG-06 | `core_config_save` | Save current configuration to file. | Configuration is persisted to disk successfully. |
| CORE-CFG-07 | `core_config_reload` | Reload configuration from file. | Configuration is reloaded from disk. Changes are applied. |

### 4.7. ServiceClass Lifecycle Tests

These tests will validate the entire lifecycle (`create`, `status`, `delete`, `healthcheck`) of our core `ServiceClasses`.

| Test Case ID | ServiceClass Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| SC-LC-01 | `workload-cluster-login` | Instantiate the service for a valid cluster. Check its status, verify context switch, and then delete it. | Service starts (`core_service_create`), context is switched, `kubectl` commands succeed, service deletes cleanly (`core_service_delete`). |
| SC-LC-02 | `workload-cluster-login` | Attempt to instantiate with an invalid cluster name. | Service creation fails with a clear, user-friendly error message. |
| SC-LC-03 | `prometheus-mcp-server` | Instantiate with a custom port. Verify the `PROMETHEUS_URL` env var is set correctly and the port-forward is active. | Service starts, env var is correct, health check passes (`core_service_status`), `x_prometheus_list_metrics` succeeds. |
| SC-LC-04 | `prometheus-mcp-server` | Attempt to instantiate on a port that is already in use. | Service creation fails immediately with a "port already in use" error. |
| SC-LC-05 | `mimir-prometheus` | Validate that the underlying `x_kubernetes_port_forward` is created and can be managed. | Service starts, `x_kubernetes_list_port_forward_sessions` shows the session, service deletes cleanly. |
| SC-LC-06 | `workload-cluster-login` | Test the start/stop/restart lifecycle of a persisted service instance. | `core_service_stop` deactivates the service. `core_service_start` reactivates it. `core_service_restart` successfully cycles the service. The service persists after a `gs-debug` restart. |
| SC-LC-07 | All | List all running service instances. | `core_service_list` returns a correct list of all active service instances with their status. |

### 4.8. Workflow Execution Tests

These tests will validate the end-to-end execution of our core SRE `Workflows`.

| Test Case ID | Workflow Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| WF-EX-01 | `setup-workload-cluster-monitoring` | Execute the full workflow against a test workload cluster. | All three services (`login`, `mimir`, `prometheus-mcp`) are created successfully and are healthy. Final status list shows all services running. |
| WF-EX-02 | `setup-workload-cluster-monitoring` | Execute the workflow with an invalid `cluster_name`. | The workflow fails gracefully on the first step (`create_cluster_login_service`) with a clear error. No subsequent steps are run. |
| WF-EX-03 | `auth-workflow` | Run the authentication workflow. | The workflow successfully authenticates via Teleport and sets the `kubectl` context without errors. |
| WF-EX-04 | `discovery-workflow` | Run the discovery workflow to find pods in `kube-system`. | The workflow correctly lists pods from the `kube-system` namespace. |
| WF-EX-05 | `aws-lb-controller-full-diagnosis` | Run against a cluster known to have the EIP/subnet mismatch issue. | The workflow correctly identifies the failing service and extracts the relevant error message from the logs. |

### 4.9. MCP Server Lifecycle Tests (Real Examples)

These tests validate the dynamic management of MCP server definitions using real examples from `.envctl/mcpservers/`.

| Test Case ID | MCP Server Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| MCP-LC-01 | `prometheus.yaml` | Create the Prometheus MCP server definition with command `["uv", "--directory", "/home/teemow/projects/prometheus-mcp-server", "run", "src/prometheus_mcp_server/main.py"]` and env vars `PROMETHEUS_URL` and `ORG_ID`. | MCP server is created successfully. `core_mcpserver_list` shows prometheus server as available. Tools like `x_prometheus_list_metrics` become accessible. |
| MCP-LC-02 | `grafana.yaml` | Create the Grafana MCP server with command `["mcp-grafana"]` and `GRAFANA_URL` environment variable. | MCP server is created successfully. Grafana tools become available for incident management and monitoring. |
| MCP-LC-03 | `kubernetes.yaml` | Register the Kubernetes MCP server dynamically at runtime. | Server becomes available immediately without restart. `core_mcpserver_available` returns true. Kubernetes tools become accessible. |
| MCP-LC-04 | `flux.yaml` | Test the Flux MCP server lifecycle - create, register, then unregister. | Server registers successfully, Flux tools become available, then become unavailable after unregistering. |
| MCP-LC-05 | `teleport.yaml` | Delete the Teleport MCP server definition from `.envctl/mcpservers/`. | MCP server definition is removed and no longer loads on restart. Teleport tools become unavailable. |
| MCP-LC-06 | `capi.yaml` | Update the CAPI MCP server definition with new configuration. | Changes are applied correctly. CAPI tools reflect the new server configuration. |
| MCP-LC-07 | `app.yaml` | Test availability check of App MCP server when underlying command exists vs. missing. | Returns `true` when command is available, `false` with clear error when command is missing. |

### 4.10. Capability Definition & Mapping Tests (Real Examples)

These tests ensure the `Capability` abstraction layer functions correctly using real examples from `.envctl/capabilities/`.

| Test Case ID | Capability Target | Test Description | Expected Outcome |
| :--- | :--- | :--- | :--- |
| CAP-DM-01 | `portforward.yaml` | Create the port forwarding capability that maps `x_kubernetes_port_forward` to generic `create` and `stop` operations with embedded workflows. | Capability is created successfully. Generic `api_portforward_create` calls correctly invoke `x_kubernetes_port_forward` with proper parameter mapping (namespace, resource_type, resource_name, local_port, remote_port). |
| CAP-DM-02 | `portforward.yaml` | Test the port forward capability's `create` operation with real parameters (e.g., namespace="kube-system", resource_type="pod", resource_name="test-pod", local_port=8080, remote_port=80). | Embedded workflow executes successfully. Port forward is created and accessible. Parameters are correctly templated into the underlying tool call. |
| CAP-DM-03 | `teleport-auth.yaml` | Create the Teleport authentication capability that maps multiple Teleport tools (`x_teleport_kube`, `x_teleport_status`, `x_teleport_list_clusters`) to standardized auth operations. | Capability is created. Generic auth operations (`login`, `status`, `logout`, `list_clusters`) correctly invoke the appropriate Teleport tools with parameter mapping. |
| CAP-DM-04 | `teleport-auth.yaml` | Test the `login` operation with real cluster parameter (e.g., cluster="gazelle-operations"). | Embedded workflow executes: checks status via `x_teleport_status`, then performs login via `x_teleport_kube` with correct cluster parameter templating. |
| CAP-DM-05 | `portforward.yaml` | Test capability availability when `x_kubernetes_port_forward` tool exists vs. when it's missing. | Returns `true` when required tools are available, `false` with specific error about missing `x_kubernetes_port_forward` tool. |
| CAP-DM-06 | `teleport-auth.yaml` | Update the Teleport auth capability to add a new operation or modify existing workflow steps. | Capability is updated successfully. New/modified operations work correctly with updated tool mappings. |
| CAP-DM-07 | `portforward.yaml` | Delete the port forwarding capability. | Capability is removed. Attempts to call generic port forward operations fail with "capability not found" error. |
| CAP-DM-08 | Both capabilities | Test parameter validation and workflow execution with invalid parameters. | Capabilities properly validate input parameters and return clear error messages for invalid inputs (e.g., missing required fields, invalid types). |



---

## 5. Non-Functional Requirements

*   **Test Suite Performance:** The full test suite should complete in a reasonable amount of time (e.g., under 5 minutes).
*   **CI/CD Integration:** The test suite must be integrated into the CI/CD pipeline to run on every commit to the `gs-debug` repository.
*   **Documentation:** All test cases and the process for running the test suite must be clearly documented.

---

## 6. Out of Scope (for V1)

*   **UI/Frontend Testing:** This effort is focused exclusively on the backend engine and its CLI/API interface.
*   **Performance/Load Testing:** The initial focus is on correctness and reliability, not performance under load.
*   **Testing of every single `x_*` tool:** We will focus on the tools used by our core abstractions, assuming that the underlying CLI tools they wrap are individually stable. 