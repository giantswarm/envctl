## PRD: API and Tool Standardization

**Author**: Gemini Agent
**Date**: 2023-10-27
**Status**: Proposed

---

### 1. Overview

This document outlines a proposal to standardize the API interfaces and the resulting MCP (Managed Component Provider) tools for all major `envctl` components. This follows the successful standardization of configuration loading (`prd-config.txt`) and aims to create a **unified, intuitive, and predictable user interface** for interacting with `envctl` programmatically.

The core principle is **"NO DIFFERENCE"** in the API structure for similar operations across different resource types. If you can `list` service classes, you should be able to `list` workflows, capabilities, and running service instances in the same way.

**This is a breaking change.** Backwards compatibility is not a goal; a clean and consistent API is the priority.

---

### 2. Core Concepts & Naming Conventions

All tools will follow a consistent `[noun]_[verb]` naming convention.

*   **Noun (Singular)**: The resource being acted upon (e.g., `serviceclass`, `workflow`, `capability`, `mcpserver`, `service`).
*   **Verb**: The action to perform (e.g., `list`, `get`, `create`, `delete`, `update`, `start`, `stop`, `restart`, `execute`).

**Key Resource Nouns:**

| Noun | Manages | Corresponding Handler |
|---|---|---|
| `serviceclass` | ServiceClass **definitions** | `ServiceClassManagerHandler` |
| `capability` | Capability **definitions** | `CapabilityHandler` |
| `workflow` | Workflow **definitions** | `WorkflowHandler` |
| `mcpserver` | MCPServer **definitions** | `MCPServerManagerHandler` |
| `service` | Running **instances** of services | `OrchestratorHandler` |

---

### 3. Standardized Toolset & API Definition

This section defines the target state for our MCP tools and the underlying Go API interfaces.

#### 3.1. ServiceClass Management

**Handler**: `ServiceClassManagerHandler`
**Tools**:
- `serviceclass_list`: List all available ServiceClass definitions.
- `serviceclass_get`: Get the details of a single ServiceClass definition.
  - `name: string`
- `serviceclass_load`: Force a reload of all ServiceClass definitions from disk.
- `serviceclass_refresh`: Refresh the availability status of all ServiceClasses.
- `serviceclass_register`: Register a new ServiceClass from a YAML definition.
  - `definition: string` (YAML content)
- `serviceclass_unregister`: Remove a dynamically registered ServiceClass.
  - `name: string`

#### 3.2. Capability Management

**Handler**: `CapabilityHandler`
**Tools**:
- `capability_list`: List all available capability definitions.
- `capability_get`: Get the details of a single capability definition.
  - `name: string`
- `capability_execute`: Execute a specific capability operation.
  - `name: string` (e.g., `kubernetes_get_pods`)
  - `parameters: map[string]interface{}`
- `capability_load`: Force a reload of all capability definitions from disk.
- `capability_refresh`: Refresh the availability status of all capabilities.

#### 3.3. Workflow Management

**Handler**: `WorkflowHandler`
**Tools**:
- `workflow_list`: List all available workflow definitions.
- `workflow_get`: Get the details of a single workflow definition.
  - `name: string`
- `workflow_execute`: Execute a workflow.
  - `name: string`
  - `parameters: map[string]interface{}`
- `workflow_create`: Create a new workflow from a YAML definition.
  - `definition: string` (YAML content)
- `workflow_update`: Update an existing workflow with a new YAML definition.
  - `name: string`
  - `definition: string` (YAML content)
- `workflow_delete`: Delete a workflow definition.
  - `name: string`
- `workflow_validate`: Validate a workflow YAML definition without creating it.
  - `definition: string` (YAML content)
- `workflow_load`: Force a reload of all workflow definitions from disk.

#### 3.4. MCPServer Management

**Handler**: `MCPServerManagerHandler`
**Tools**:
- `mcpserver_list`: List all available MCP Server definitions.
- `mcpserver_get`: Get the details of a single MCP Server definition.
  - `name: string`
- `mcpserver_load`: Force a reload of all MCP Server definitions from disk.
- `mcpserver_refresh`: Refresh the availability status of all MCP Servers.
- `mcpserver_register`: Register a new MCP Server from a YAML definition.
  - `definition: string` (YAML content)
- `mcpserver_unregister`: Remove a dynamically registered MCP Server.
  - `name: string`

#### 3.5. Service Instance Management (Orchestrator)

This is the most significant change, unifying the management of all running services.

**Handler**: `OrchestratorHandler` (To be renamed to `ServiceManagerHandler` or similar)
**Tools**:
- `service_list`: List all running and stopped service instances.
- `service_get`: Get the status and details of a single service instance.
  - `name: string` (The unique label of the instance)
- `service_start`: Start a defined service instance (e.g., an MCPServer defined in a file).
  - `name: string`
- `service_stop`: Stop a running service instance.
  - `name: string`
- `service_restart`: Restart a service instance.
  - `name: string`
- `service_create`: Create and start a **new** service instance from a ServiceClass.
  - `serviceClassName: string`
  - `instanceName: string` (The unique label for the new instance)
  - `parameters: map[string]interface{}`
- `service_delete`: Stop and delete a service instance created from a ServiceClass.
  - `name: string`
- `service_logs`: (Future) Stream logs from a service instance.
  - `name: string`
- `service_events`: (Future) Subscribe to events for all service instances.

---

### 4. Revised API Interfaces

The interfaces in `internal/api/handlers.go` will be refactored to reflect the new standard.

```go
// in internal/api/handlers.go

// Manages definitions
type DefinitionManager interface {
    List() []ListItem
    Get(name string) (*Definition, error)
    Load() error
    Refresh()
    Register(yamlDef string) error
    Unregister(name string) error
    // ... plus specific types for ListItem and Definition
}

// Manages running instances
type ServiceManagerHandler interface {
    ListInstances() []InstanceInfo
    GetInstance(name string) (*InstanceInfo, error)
    CreateInstance(className, instanceName string, params map[string]interface{}) (*InstanceInfo, error)
    DeleteInstance(name string) error
    StartInstance(name string) error
    StopInstance(name string) error
    RestartInstance(name string) error
    SubscribeToEvents() <-chan Event
}

// Manages executable units
type ExecutionHandler interface {
    List() []ExecutableInfo
    Get(name string) (*ExecutableDefinition, error)
    Execute(name string, params map[string]interface{}) (*CallToolResult, error)
}

// The specific handlers will implement these conceptual interfaces.
// For example, ServiceClassManagerHandler, MCPServerManagerHandler will be based on DefinitionManager.
// WorkflowHandler and CapabilityHandler will be based on ExecutionHandler.
// OrchestratorHandler will become the ServiceManagerHandler.
```

---

### 5. Implementation Plan

The refactoring will be executed in the following order to minimize disruption.

1.  **Task 1: Refactor `ConfigHandler`**.
    *   Remove the now-obsolete `GetMCPServers`, `UpdateMCPServer`, and `DeleteMCPServer` methods from the `ConfigHandler` interface and its adapter implementation (`internal/app/config_adapter.go`).
    *   Update any tests that rely on these methods.

2.  **Task 2: Standardize `ServiceClassManagerHandler` and `MCPServerManagerHandler`**.
    *   Rename methods to `list`, `get`, `load`, `refresh`, `register`, `unregister`.
    *   Update the corresponding adapters and tool names (`serviceclass_*`, `mcpserver_*`).
    *   Update tests.

3.  **Task 3: Standardize `WorkflowHandler` and `CapabilityHandler`**.
    *   Align method names: `list`, `get`, `execute`.
    *   For `CapabilityHandler`, the `execute` method will internally derive `capabilityType` and `operation` from the single `name` parameter (e.g., "kubernetes_get_pods").
    *   Update adapters and tool names (`workflow_*`, `capability_*`).
    *   Update tests.

4.  **Task 4: Refactor `OrchestratorHandler` into `ServiceManagerHandler`**.
    *   This is the largest task.
    *   Create a new, clean `ServiceManagerHandler` interface.
    *   Merge the functionality of `StartService`/`StopService` (for static services) and `CreateServiceClassInstance`/`DeleteServiceClassInstance` (for dynamic services) into a single set of methods: `start`, `stop`, `restart`, `create`, `delete`.
    *   The `create` method will handle dynamic `ServiceClass` instantiation.
    *   The `start` method will handle starting services defined by static definitions (like MCP Servers).
    *   Update the orchestrator implementation to back this new, unified interface.
    *   Update the adapter and create the new `service_*` tools.
    *   Update all tests, including TUI tests that rely on the old orchestrator methods.

5.  **Task 5: Final Verification**.
    *   Run `go build ./...` and `go test ./...` to ensure all changes are integrated and functional.
    *   Manually test the new toolset via `mcp-debug` to confirm the user experience is consistent and correct.

---
`I will now start with Task 1.` 