name: "serviceclass-error-handling-scenarios"
category: "behavioral"
concept: "serviceclass"
description: "Scenarios for error handling in ServiceClass management based on the correct data model"
tags: ["serviceclass", "error-handling", "core-api"]
timeout: "5m"

steps:
- id: "create-sc-invalid-yaml"
  description: "Attempt to create a ServiceClass with syntactically invalid YAML"
  tool: "core_serviceclass_create"
  args:
    yaml: "name: invalid-sc: 'this is broken yaml"
  expected:
    success: false
    error_contains: ["invalid YAML"]

- id: "create-sc-missing-name"
  description: "Attempt to create a ServiceClass with a missing 'name' field"
  tool: "core_serviceclass_create"
  args:
    yaml: |
      type: "basic"
      description: "This ServiceClass is missing its name"
  expected:
    success: false
    error_contains: ["name is required"]

- id: "create-sc-missing-start-tool"
  description: "Attempt to create a SC missing the required 'start' lifecycle tool"
  tool: "core_serviceclass_create"
  args:
    yaml: |
      name: "sc-missing-start"
      type: "basic"
      serviceConfig:
        lifecycleTools:
          stop:
            tool: "x_some-mock_tool"
  expected:
    success: false
    error_contains: ["'start' lifecycle tool is required"]

- id: "create-sc-with-non-existent-tool"
  description: "Create a SC that references a tool that does not exist"
  tool: "core_serviceclass_create"
  args:
    yaml: |
      name: "sc-bad-tool-ref"
      type: "basic"
      serviceConfig:
        lifecycleTools:
          start: { tool: "x_fake-provider_fake-tool" }
          stop: { tool: "x_fake-provider_fake-tool" }
  expected:
    success: true # Creation is allowed, but it should be unavailable
  cleanup:
  - tool: "core_serviceclass_delete"
    args: { name: "sc-bad-tool-ref" }

- id: "check-availability-of-sc-with-bad-tool"
  description: "Check availability of a SC with a non-existent tool reference"
  tool: "core_serviceclass_available"
  args:
    name: "sc-bad-tool-ref"
  expected:
    success: true
    json_path:
      available: false
      missingTools: ["x_fake-provider_fake-tool"]

- id: "get-non-existent-sc"
  description: "Attempt to get a ServiceClass that does not exist"
  tool: "core_serviceclass_get"
  args:
    name: "non-existent-sc"
  expected:
    success: false
    error_contains: ["not found"]

- id: "update-non-existent-sc"
  description: "Attempt to update a ServiceClass that does not exist"
  tool: "core_serviceclass_update"
  args:
    name: "non-existent-sc"
    yaml: |
      name: "non-existent-sc"
  expected:
    success: false
    error_contains: ["not found"]

- id: "delete-non-existent-sc"
  description: "Attempt to delete a ServiceClass that does not exist"
  tool: "core_serviceclass_delete"
  args:
    name: "non-existent-sc"
  expected:
    success: false
    error_contains: ["not found"]

- id: "create-serviceclass-with-conflicting-name"
  description: "Create a service class, then attempt to create another with the same name"
  tool: "core_serviceclass_create"
  args:
    yaml: |
      name: conflicting-name-serviceclass
      type: "basic"
      serviceConfig:
        lifecycleTools:
          start: { tool: "core_service_list" }
  expected:
    success: true
  cleanup:
  - tool: "core_serviceclass_delete"
    args: { name: "conflicting-name-serviceclass" }

- id: "create-conflicting-serviceclass-step-2"
  description: "Attempt to create a service class with a name that already exists"
  tool: "core_serviceclass_create"
  args:
    yaml: |
      name: conflicting-name-serviceclass
      type: "basic"
  expected:
    success: false
    error_contains: ["already exists"]

- id: "check-availability-for-non-existent-serviceclass"
  description: "Check availability for a ServiceClass that does not exist"
  tool: "core_serviceclass_available"
  args:
    name: "non-existent-serviceclass"
  expected:
    success: false
    error_contains: ["not found"]

- id: "check-availability-with-missing-tools"
  description: "Check availability for a ServiceClass with missing lifecycle tools"
  tool: "core_serviceclass_create"
  args:
    yaml: |
      name: missing-tools-serviceclass
      type: "basic"
      serviceConfig:
        lifecycleTools:
          start: { tool: "x_non-existent-mock_start" }
  expected:
    success: true
  cleanup:
  - tool: "core_serviceclass_delete"
    args: { name: "missing-tools-serviceclass" }

- id: "check-availability-with-missing-tools-step-2"
  description: "Check availability for a service class with missing tools, expecting it to be unavailable"
  tool: "core_serviceclass_available"
  args:
    name: "missing-tools-serviceclass"
  expected:
    success: true
    json_path:
      available: false
      # check for missing tools in the reason
      reason:
        contains: ["x_non-existent-mock_start"] 