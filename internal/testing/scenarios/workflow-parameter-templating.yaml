name: "workflow-parameter-templating-scenarios"
category: "behavioral"
concept: "workflow"
tags: ["workflow", "parameters", "templating", "core-api"]
timeout: "5m"

pre_configuration:
  workflows:
    - name: "param-templating-workflow"
      config:
        name: "param-templating-workflow"
        input_schema:
          type: "object"
          properties:
            service_name:
              type: "string"
              required: true
            message:
              type: "string"
              default: "default message"
        steps:
          - id: "echo-step"
            tool: "x_mock-echo_echo"
            args:
              text: "Service {{ .service_label }} says: {{ .message }}"

  mcp_servers:
    - name: "mock-echo"
      config:
        tools:
          - name: "echo"
            input_schema:
              type: "object"
              properties:
                text: { type: "string" }
            responses:
              - response:
                  # The response also uses templating based on its *own* inputs
                  echoed_text: "{{ .text }}"

steps:
- id: "run-workflow-with-all-params"
  tool: "workflow_param-templating-workflow"
  args:
    service_name: "myservice"
    message: "hello world"
  expected:
    success: true
    # The output of the workflow is the output of its last step
    json_path:
      echoed_text: "Service myservice says: hello world"

- id: "run-workflow-with-default-param"
  tool: "workflow_param-templating-workflow"
  args:
    service_name: "anotherservice"
  expected:
    success: true
    json_path:
      echoed_text: "Service anotherservice says: default message"

- id: "run-workflow-missing-required-param"
  tool: "workflow_param-templating-workflow"
  args:
    message: "this will fail"
  expected:
    success: false
    error_contains: ["missing required parameter: service_label"]

- id: "run-workflow-with-wrong-param-type"
  tool: "workflow_param-templating-workflow"
  args:
    service_name: 12345
  expected:
    success: false
    error_contains: ["invalid type for parameter 'service_label'"] 