name: "behavior-service-resilience-and-error-recovery"
category: "behavioral"
concept: "service"
description: "As a developer, I want clear error feedback and recovery options when services fail so that I can troubleshoot and resolve issues quickly"
tags: ["service", "error-handling", "resilience", "developer-experience", "user-story"]
timeout: "5m"

# User Story: Developer Handling Service Failures Gracefully
# Given: Infrastructure services can fail due to various reasons
# When: I attempt to create or manage services that encounter failures
# Then: I should receive clear error messages and have options for recovery

pre_configuration:
  # Simulate real-world scenarios where infrastructure can fail
  mcp_servers:
  - name: "unreliable-database-provider"
    config:
      tools:
      - name: "create_database"
        responses: [ { error: "Database server is currently unavailable - connection timeout after 30s" } ]
      - name: "health_check"
        responses: [ { error: "Service health check failed: port 5432 unreachable" } ]
        
  - name: "working-provider"
    config:
      tools:
      - name: "create_cache"
        responses: [ { response: { cache_id: "cache-{{ .name }}", status: "created" } } ]
        
  service_classes:
  - name: "database-service"
    config:
      name: "database-service"
      type: "data"
      description: "PostgreSQL database service"
      serviceConfig:
        createParameters:
          name:
            toolParameter: "db_name"
            required: true
        lifecycleTools:
          start: { tool: "x_unreliable-database-provider_create_database" }
          stop: { tool: "core_config_get" }
          
  - name: "cache-service"
    config:
      name: "cache-service"
      type: "data"
      description: "Redis cache service"
      serviceConfig:
        createParameters:
          name:
            toolParameter: "cache_name"
            required: true
        lifecycleTools:
          start: { tool: "x_working-provider_create_cache" }
          stop: { tool: "core_config_get" }

steps:
# Phase 1: Developer Attempts Service Creation (When)
- id: "developer-attempts-database-service-creation"
  description: "When I try to create a database service for my application"
  tool: "core_service_create"
  args:
    serviceClassName: "database-service"
    label: "my-app-database"
    parameters:
      name: "my_app_db"
  expected:
    success: false
    error_contains: ["Database server is currently unavailable"]

# Phase 2: Developer Receives Clear Error Feedback (Then)
- id: "developer-verifies-service-not-created"
  description: "Then the service should not be created and I should be able to verify this"
  tool: "core_service_get"
  args:
    labelOrServiceId: "my-app-database"
  expected:
    success: false
    error_contains: ["not found"]

- id: "developer-checks-service-class-status"
  description: "And I should be able to check if the service class itself is available"
  tool: "core_serviceclass_available"
  args:
    name: "database-service"
  expected:
    success: true
    json_path:
      available: false  # Should show as unavailable due to tool failure

# Phase 3: Developer Tries Alternative Solution (Recovery)
- id: "developer-creates-working-service-instead"
  description: "When I try a different service that should work"
  tool: "core_service_create"
  args:
    serviceClassName: "cache-service"
    label: "my-app-cache"
    parameters:
      name: "my_app_cache"
  expected:
    success: true
    contains: ["my-app-cache"]

- id: "developer-verifies-working-service-created"
  description: "Then the working service should be successfully created"
  tool: "core_service_get"
  args:
    labelOrServiceId: "my-app-cache"
  expected:
    success: true
    json_path:
      label: "my-app-cache"
      serviceClass: "cache-service"
      state: "RUNNING"

# Phase 4: Developer Understands System Status
- id: "developer-lists-all-services"
  description: "And I should see only the working services in my environment"
  tool: "core_service_list"
  expected:
    success: true
    contains: ["my-app-cache"]
    not_contains: ["my-app-database"]

# Phase 5: Developer Cleans Up Working Resources
- id: "developer-removes-working-service"
  description: "When I finish testing, I can clean up the working service"
  tool: "core_service_delete"
  args:
    labelOrServiceId: "my-app-cache"
  expected:
    success: true

cleanup:
  - id: "cleanup-cache-service"
    description: "Ensure cache service is removed"
    tool: "core_service_delete"
    args:
      labelOrServiceId: "my-app-cache"
    expected:
      success: true
    timeout: "30s" 