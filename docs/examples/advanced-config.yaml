# Advanced envctl configuration example
# This demonstrates complex multi-cluster setups with the new flexible cluster system

globalSettings:
  defaultContainerRuntime: "podman"

# Define multiple clusters across different environments
clusters:
  # Production environment
  - name: "prod-mc"
    context: "teleport.giantswarm.io-prod"
    role: "observability"
    displayName: "Production Management Cluster"
    icon: "üè¢"
  
  - name: "prod-api"
    context: "teleport.giantswarm.io-prod-api"
    role: "target"
    displayName: "Production API Cluster"
    icon: "üöÄ"
  
  - name: "prod-web"
    context: "teleport.giantswarm.io-prod-web"
    role: "target"
    displayName: "Production Web Cluster"
    icon: "üåê"
  
  # Staging environment
  - name: "staging-mc"
    context: "teleport.giantswarm.io-staging"
    role: "observability"
    displayName: "Staging Management Cluster"
    icon: "üß™"
  
  - name: "staging-apps"
    context: "teleport.giantswarm.io-staging-apps"
    role: "target"
    displayName: "Staging Applications"
    icon: "üîß"
  
  # Special purpose clusters
  - name: "logging-central"
    context: "teleport.giantswarm.io-logging"
    role: "custom"
    displayName: "Central Logging Platform"
    icon: "üìù"
  
  - name: "ml-platform"
    context: "gke_my-project_us-central1_ml-platform"
    role: "custom"
    displayName: "ML Training Platform"
    icon: "ü§ñ"

# Set initial active clusters (can be changed via TUI)
activeClusters:
  observability: "prod-mc"
  target: "prod-api"
  custom: "logging-central"

# Complex port forwarding setups
portForwards:
  # Core monitoring services from observability cluster
  - name: "prometheus"
    enabledByDefault: true
    icon: "üìä"
    category: "Core Monitoring"
    clusterRole: "observability"
    namespace: "mimir"
    targetType: "service"
    targetName: "mimir-query-frontend"
    localPort: "8080"
    remotePort: "8080"
  
  - name: "grafana"
    enabledByDefault: true
    icon: "üìà"
    category: "Core Monitoring"
    clusterRole: "observability"
    namespace: "mimir"
    targetType: "service"
    targetName: "grafana"
    localPort: "3000"
    remotePort: "3000"
  
  - name: "alertmanager"
    enabledByDefault: true
    icon: "üö®"
    category: "Core Monitoring"
    clusterRole: "observability"
    namespace: "mimir"
    targetType: "service"
    targetName: "alertmanager"
    localPort: "9093"
    remotePort: "9093"
  
  # Application-specific forwards from target clusters
  - name: "api-gateway"
    enabledByDefault: true
    icon: "üîå"
    category: "API Services"
    clusterRole: "target"
    namespace: "production"
    targetType: "service"
    targetName: "api-gateway"
    localPort: "8000"
    remotePort: "80"
    bindAddress: "0.0.0.0"  # Bind to all interfaces for team access
  
  - name: "api-metrics"
    enabledByDefault: false
    icon: "üìä"
    category: "API Services"
    clusterRole: "target"
    namespace: "production"
    targetType: "pod"
    targetLabelSelector: "app=api,component=metrics"
    localPort: "9090"
    remotePort: "9090"
  
  # Specific cluster forwards (not role-based)
  - name: "loki-central"
    enabledByDefault: true
    icon: "üìú"
    category: "Logging"
    clusterName: "logging-central"  # Always from this specific cluster
    namespace: "loki"
    targetType: "service"
    targetName: "loki-gateway"
    localPort: "3100"
    remotePort: "80"
  
  - name: "jupyter-notebooks"
    enabledByDefault: false
    icon: "üìì"
    category: "ML Platform"
    clusterName: "ml-platform"  # Always from ML platform
    namespace: "jupyter"
    targetType: "service"
    targetName: "jupyter-hub"
    localPort: "8888"
    remotePort: "8888"

# Advanced MCP server configurations
mcpServers:
  # Multiple Kubernetes MCPs for different clusters
  - name: "kubernetes-prod"
    type: "localCommand"
    enabledByDefault: true
    icon: "‚ò∏Ô∏è"
    category: "Production"
    command: ["mcp-server-kubernetes"]
    env:
      CLUSTER_LABEL: "production"
    requiresClusterRole: "target"  # Connects to active target cluster
  
  - name: "kubernetes-staging"
    type: "localCommand"
    enabledByDefault: false
    icon: "üß™"
    category: "Staging"
    command: ["mcp-server-kubernetes"]
    env:
      CLUSTER_LABEL: "staging"
    requiresClusterName: "staging-apps"  # Always connects to staging
  
  # Custom containerized MCP for ML workloads
  - name: "ml-assistant"
    type: "container"
    enabledByDefault: false
    icon: "ü§ñ"
    category: "ML Platform"
    image: "myregistry/mcp-ml-assistant:latest"
    containerPorts:
      - "8004:8080"
    containerEnv:
      MODEL_PATH: "/models"
      GPU_ENABLED: "true"
    containerVolumes:
      - "~/.kube/config:/root/.kube/config:ro"
      - "/var/ml-models:/models:ro"
    requiresClusterName: "ml-platform"
    requiresPortForwards: ["jupyter-notebooks"]
  
  # Enhanced monitoring MCPs
  - name: "prometheus-multi"
    type: "container"
    enabledByDefault: true
    icon: "üìä"
    category: "Monitoring"
    image: "giantswarm/mcp-prometheus-multi:latest"
    containerPorts:
      - "8002:8080"
    containerEnv:
      PROMETHEUS_URLS: "prod=http://localhost:8080,staging=http://localhost:8081"
      DEFAULT_TENANT: "prod"
    requiresPortForwards:
      - "prometheus"
  
  - name: "loki-mcp"
    type: "container"
    enabledByDefault: true
    icon: "üìú"
    category: "Logging"
    image: "myregistry/mcp-loki:latest"
    containerPorts:
      - "8005:8080"
    containerEnv:
      LOKI_URL: "http://localhost:3100"
    requiresPortForwards:
      - "loki-central"
  
  # Development tools MCP with custom script
  - name: "dev-tools"
    type: "localCommand"
    enabledByDefault: false
    icon: "üõ†Ô∏è"
    category: "Development"
    command: ["./scripts/dev-mcp-wrapper.sh"]
    env:
      DEV_MODE: "true"
      TOOLS_PATH: "/opt/dev-tools"
      KUBECTL_CONTEXT_OVERRIDE: "true"
    requiresClusterRole: "target"

# Example of using hooks (future feature)
# hooks:
#   preStart:
#     - name: "check-vpn"
#       command: ["./scripts/check-vpn.sh"]
#   postStart:
#     - name: "notify-team"
#       command: ["./scripts/notify-slack.sh", "Environment ready"]
#   preStop:
#     - name: "cleanup"
#       command: ["./scripts/cleanup-temp-resources.sh"] 