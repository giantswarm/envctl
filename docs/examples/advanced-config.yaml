# Advanced envctl configuration example
# This file demonstrates advanced configuration options including
# custom port forwards, additional MCP servers, and environment-specific settings

# Port forwards with advanced configurations
portForwards:
  # Standard services (as in basic config)
  - name: mc-prometheus
    enabled: true
    namespace: mimir
    service: prometheus-operated
    localPort: 8080
    remotePort: 9090
    kubeContextTarget: "mc"

  - name: mc-grafana
    enabled: true
    namespace: mimir
    service: grafana
    localPort: 3000
    remotePort: 3000
    kubeContextTarget: "mc"

  # Loki for log aggregation
  - name: mc-loki
    enabled: true
    namespace: loki
    service: loki-gateway
    localPort: 3100
    remotePort: 80
    kubeContextTarget: "mc"

  # Alertmanager for alert management
  - name: mc-alertmanager
    enabled: true
    namespace: mimir
    service: alertmanager-operated
    localPort: 9093
    remotePort: 9093
    kubeContextTarget: "mc"

  # Custom application from workload cluster
  - name: wc-myapp
    enabled: false  # Disabled by default, enable when needed
    namespace: myapp-namespace
    service: myapp-service
    localPort: 8888
    remotePort: 8080
    kubeContextTarget: "wc"  # Targets workload cluster

  # Alloy metrics with custom port
  - name: alloy-metrics
    enabled: true
    namespace: kube-system
    service: alloy-metrics
    localPort: 12345
    remotePort: 12345
    kubeContextTarget: "dynamic"

# Extended MCP server configurations
mcpServers:
  # Standard MCP servers
  - name: kubernetes
    enabled: true
    type: localCommand
    command: ["mcp-server-kubernetes"]
    proxyPort: 8001
    requiresK8sConnection: "mc"

  - name: prometheus
    enabled: true
    type: localCommand
    command: ["mcp-server-prometheus"]
    proxyPort: 8002
    requiresPortForwards: ["mc-prometheus"]
    env:
      PROMETHEUS_URL: "http://localhost:8080"
      # Additional Prometheus configuration
      PROMETHEUS_TIMEOUT: "30s"
      PROMETHEUS_MAX_SAMPLES: "50000"

  - name: grafana
    enabled: true
    type: localCommand
    command: ["mcp-server-grafana"]
    proxyPort: 8003
    requiresPortForwards: ["mc-grafana"]
    env:
      GRAFANA_URL: "http://localhost:3000"
      # Grafana API configuration
      GRAFANA_API_KEY: "${GRAFANA_API_KEY}"  # Use environment variable

  # Custom MCP server with Python script
  - name: custom-analyzer
    enabled: false
    type: localCommand
    command: ["python3", "-m", "custom_mcp_analyzer"]
    proxyPort: 8004
    requiresPortForwards: ["mc-prometheus", "mc-loki"]
    env:
      PROMETHEUS_URL: "http://localhost:8080"
      LOKI_URL: "http://localhost:3100"
      ANALYSIS_INTERVAL: "60s"

  # Containerized MCP server example
  - name: kubernetes-container
    enabled: false  # Enable to use containerized version
    type: container
    image: "ghcr.io/giantswarm/mcp-server-kubernetes:latest"
    proxyPort: 8005
    requiresK8sConnection: "mc"
    ports:
      - "8005:8000"  # Map container port 8000 to local 8005
    volumes:
      - "${HOME}/.kube:/root/.kube:ro"  # Mount kubeconfig
    env:
      KUBECONFIG: "/root/.kube/config"
      LOG_LEVEL: "debug"

  # MCP server with complex dependencies
  - name: cluster-monitor
    enabled: false
    type: localCommand
    command: ["cluster-monitor-mcp"]
    proxyPort: 8006
    requiresK8sConnection: "mc"  # Needs K8s connection
    requiresPortForwards: ["mc-prometheus", "mc-alertmanager"]  # Multiple dependencies
    env:
      PROMETHEUS_URL: "http://localhost:8080"
      ALERTMANAGER_URL: "http://localhost:9093"
      CLUSTER_NAME: "${CLUSTER_NAME:-unknown}"
      MONITOR_INTERVAL: "30s"
      ENABLE_ALERTS: "true"

# Environment-specific overrides can be placed in:
# - ~/.config/envctl/config.yaml (user-specific)
# - ./.envctl/config.yaml (project-specific)
#
# These files will be merged with this configuration, with later
# files taking precedence over earlier ones. 