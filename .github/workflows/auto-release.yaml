---
# yamllint disable rule:truthy
name: Auto Release
on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write  # Needed to create releases and tags
  pull-requests: read  # Needed to read PR information

jobs:
  auto_release:
    name: Auto Release
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history and tags for version calculation and changelog
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'  # Specify Go version

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          version: latest
          args: --version  # Print version for verification

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Determine Next Version
        id: version
        run: |
          set -e
          # Get the latest tag, defaulting to v0.0.0 if none exists
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null \
            || echo "v0.0.0")
          # Remove 'v' prefix
          LATEST_VERSION=${LATEST_TAG#v}
          # Split into major, minor, patch
          IFS='.' read -r -a VERSION_PARTS <<< "$LATEST_VERSION"
          # Increment patch version
          NEXT_PATCH=$((VERSION_PARTS[2] + 1))
          # Construct next version string
          NEXT_VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEXT_PATCH"
          echo "Latest tag: $LATEST_TAG"
          echo "Next version: $NEXT_VERSION"
          # Set output for subsequent steps
          echo "next_version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Update CHANGELOG.md
        id: changelog
        run: |
          PR_TITLE=$(jq -r .pull_request.title "$GITHUB_EVENT_PATH")
          PR_NUMBER=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")
          PR_URL=$(jq -r .pull_request.html_url "$GITHUB_EVENT_PATH")
          PR_USER=$(jq -r .pull_request.user.login "$GITHUB_EVENT_PATH")
          NEXT_VERSION="${{ steps.version.outputs.next_version }}"
          # Format entry: "- PR Title (#PR) by @user"
          # Break long line
          CHANGELOG_ENTRY="- ${PR_TITLE} ([#${PR_NUMBER}](${PR_URL})) \
            by @${PR_USER}"

          echo "Generated changelog entry:"
          echo "$CHANGELOG_ENTRY"

          # Check if CHANGELOG.md exists
          if [[ -f CHANGELOG.md ]]; then
            # Check if [Unreleased] section exists
            if grep -q "## \[Unreleased\]" CHANGELOG.md; then
              # Insert entry under [Unreleased]
              # Use printf for the entry to handle potential special characters
              # Use sed with a unique delimiter (#) to avoid issues with slashes
              printf '%s\n' "$CHANGELOG_ENTRY" | \
                sed -i -e "/## \[Unreleased\]/a $(cat -)" CHANGELOG.md
            else
              # Prepend [Unreleased] section and the entry
              TEMP_FILE=$(mktemp)
              # Break long printf line
              printf "## [Unreleased]\n\n%s\n\n" \
                "$CHANGELOG_ENTRY" > "$TEMP_FILE"
              cat CHANGELOG.md >> "$TEMP_FILE"
              mv "$TEMP_FILE" CHANGELOG.md
            fi
          else
            # Create a new CHANGELOG.md with minimal content
            printf "# Changelog\n\n" > CHANGELOG.md
            printf "All notable changes to this project " >> CHANGELOG.md
            printf "will be documented.\n\n" >> CHANGELOG.md
            printf "Format based on [Keep a Changelog]" >> CHANGELOG.md
            # Break long URL line further
            printf "(https://keepachangelog.com/" >> CHANGELOG.md
            printf "en/1.0.0/),\n" >> CHANGELOG.md
            printf "and this project adheres to " >> CHANGELOG.md
            printf "[Semantic Versioning]" >> CHANGELOG.md
            # Break long URL line
            printf "(https://semver.org/spec/" >> CHANGELOG.md
            printf "v2.0.0.html).\n\n" >> CHANGELOG.md
            printf "## [Unreleased]\n\n" >> CHANGELOG.md
            printf "%s\n" "$CHANGELOG_ENTRY" >> CHANGELOG.md
          fi

          # Add and commit CHANGELOG.md
          git add CHANGELOG.md
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to CHANGELOG.md to commit."
          else
            git commit -m "docs: Update CHANGELOG for release \
              ${{ steps.version.outputs.next_version }}"
            git push
            echo "Committed and pushed CHANGELOG.md changes."
          fi

      - name: Create Tag
        run: |
          NEXT_VERSION="${{ steps.version.outputs.next_version }}"
          git tag "$NEXT_VERSION"
          git push origin "$NEXT_VERSION"
          echo "Created and pushed tag $NEXT_VERSION"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
