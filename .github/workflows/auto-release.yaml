name: Auto Release
on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write  # Needed to create releases and tags
  pull-requests: read  # Needed to read PR information

jobs:
  auto_release:
    name: Auto Release
    # Run only when a PR is merged (not when closed without merging)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # We need all tags for versioning

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      - name: Setup Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Get current version
        id: get_version
        run: |
          # Find the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Set output
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        id: update_changelog
        run: |
          # Get PR title and number
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          NEW_VERSION="${{ steps.get_version.outputs.new_version }}"
          TODAY=$(date +"%Y-%m-%d")
          
          # Create changelog entry
          CHANGELOG_ENTRY="\n## [${NEW_VERSION}] - ${TODAY}\n\n### Changed\n\n- ${PR_TITLE} (PR #${PR_NUMBER}, @${PR_AUTHOR})\n"
          
          # Check if CHANGELOG.md exists and has the Unreleased section
          if [ -f CHANGELOG.md ]; then
            # Insert new version entry after the Unreleased section
            sed -i "/## \[Unreleased\]/a\\${CHANGELOG_ENTRY}" CHANGELOG.md
          else
            # Create a new CHANGELOG.md
            cat > CHANGELOG.md << EOF
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

${CHANGELOG_ENTRY}
EOF
          fi
          
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for release v${NEW_VERSION}"

      - name: Create Tag
        run: |
          NEW_TAG="${{ steps.get_version.outputs.new_tag }}"
          git tag -a "${NEW_TAG}" -m "Release ${NEW_TAG}"
          git push origin "${NEW_TAG}"

      - name: Build and Release
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
